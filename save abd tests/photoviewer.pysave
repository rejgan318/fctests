#!/usr/bin/env python
"""
Просмоторщик фотографий
"""
import PySimpleGUI as sg
import os
from PIL import Image, ImageTk, ExifTags
import io
import pathlib


class FolderPhoto:
    def __init__(self, folder_name):
        self.MASK = '*.jpg'
        self.folder = folder_name
        self.photos = self.get_photos()
        self.dirs = self.get_dirs()
        self.count = len(self.photos)
        self.num = 0    # текущий номер файла, сейчас отображается
        self.name = None
        self.img = None
        self.new_num()

    def new_num(self):
        """ новй файл из списка. меняем имя и загружаем """
        self.name = self.photos[self.num]
        self.get_img()

    def next(self) -> str:
        """ возвращает имя следующего файла циклически """
        self.num = self.num + 1 if self.num < self.count - 1 else 0
        self.new_num()
        return self.name

    def prev(self) -> str:
        """ возвращает имя предыдущего файла циклически """
        self.num = self.num - 1 if self.num > 0 else self.count - 1
        self.new_num()
        return self.name
    # filename = os.path.join(folder, fnames[ip])

    def get_photos(self):
        """ получить список фотографий """
        return [str(p.name) for p in pathlib.Path(self.folder).glob(self.MASK) if p.is_file()]

    def get_dirs(self):
        """ получить список поддиректорий, добавив .. """
        return ['..'] + [str(d.name) for d in pathlib.Path(self.folder).glob("*") if d.is_dir()]

    def get_img(self):
        """ загрузить файл; проверить по exif, если необходимо - повернуть; промасштабировать """
        maxsize = (1530, 850)
        self.img = Image.open(pathlib.Path(self.folder) / self.name)
        try:
            for orientation in ExifTags.TAGS.keys():
                if ExifTags.TAGS[orientation] == 'Orientation':
                    break
            exif = self.img._getexif()
            if exif:
                if exif[orientation] == 3:
                    img = self.img.rotate(180, expand=True)
                elif exif[orientation] == 6:
                    img = self.img.rotate(270, expand=True)
                elif exif[orientation] == 8:
                    img = self.img.rotate(90, expand=True)
        except (AttributeError, KeyError, IndexError):
            pass  # cases: image don't have getexif
        self.img.thumbnail(maxsize)

    def get_img_data(self):
        """ Вернуть img в формате png (из-за ограничений tkinter) """
        bio = io.BytesIO()
        self.img.save(bio, format="PNG")
        return bio.getvalue()

# Get the folder containin:g the images from the user
# folder = sg.popup_get_folder('Image folder to open', default_path='')
# if not folder:
#     sg.popup_cancel('Cancelling')
#     raise SystemExit()
# folder = './'
folder = 'testpict'
img_types = (".jpg", "jpeg")
# photos = list(pathlib.Path(folder).glob("*.jpg"))
# directories = [str(d.name) for d in pathlib.Path(folder).glob("*") if d.is_dir()]
ps = FolderPhoto(folder)

# get list of files in folder
flist0 = os.listdir(folder)

# create sub list of image files (no sub folders, no wrong file types)
fnames = [f for f in flist0 if os.path.isfile(
    os.path.join(folder, f)) and f.lower().endswith(img_types)]

num_files = len(fnames)  # number of iamges found
if num_files == 0:
    sg.popup('No files in folder')
    raise SystemExit()
del flist0  # no longer needed


def get_img_data(photoname, maxsize=(1530, 850)):
    """ Generate image data using PIL """
    img = Image.open(photoname)
    try:
        for orientation in ExifTags.TAGS.keys():
            if ExifTags.TAGS[orientation] == 'Orientation':
                break
        exif = img._getexif()
        if exif:
            if exif[orientation] == 3:
                img = img.rotate(180, expand=True)
            elif exif[orientation] == 6:
                img = img.rotate(270, expand=True)
            elif exif[orientation] == 8:
                img = img.rotate(90, expand=True)
    except (AttributeError, KeyError, IndexError):
        pass  # cases: image don't have getexif

    img.thumbnail(maxsize)
    bio = io.BytesIO()
    img.save(bio, format="PNG")
    return bio.getvalue()


filename = os.path.join(folder, fnames[0])  # name of first file in list

ip = 0  # № текушей фотографии

lcol = [
    [sg.Listbox(values=ps.dirs, enable_events=True, size=(20, 5), font=('default', 10, 'bold'),
                tooltip='Поддиректории', key='-DIRECTORIES-')],
    # [sg.Text(filename, size=(20, 1), key='-FILE_NAME-')],
    [sg.Listbox(values=fnames, enable_events=True, size=(20, 10), key='-PHOTOS-')],
    # [sg.Text(f'{ip + 1}/{num_files}', size=(10, 1), key='-FILES_NUMS-'),],
]
rcol = [[sg.Image(data=get_img_data(filename), key='-IMAGE-')]]
layout = [[sg.Column(lcol, vertical_alignment='top'), sg.Column(rcol)]]
window = sg.Window('Image Browser: ' + filename, layout, return_keyboard_events=True,
                   location=(0, 0), use_default_focus=False, resizable=True)

while True:
    event, values = window.read()
    print(event, values)
    if event == sg.WIN_CLOSED:
        break
    elif event in ('Right:39',):
        ip = ip + 1 if ip < num_files - 1 else 0
        filename = os.path.join(folder, fnames[ip])
    elif event in ('Left:37',):
        ip = ip - 1 if ip > 0 else num_files - 1
        filename = os.path.join(folder, fnames[ip])
    elif event == '-PHOTOS-':  # something from the listbox
        f = values['-PHOTOS-'][0]  # selected filename
        filename = os.path.join(folder, f)  # read this file
        ip = fnames.index(f)  # update running index
    else:
        filename = os.path.join(folder, fnames[ip])
    window.set_title('Image Browser: ' + f'{ip + 1}/{num_files} ' + filename)
    window['-IMAGE-'].update(data=get_img_data(filename))
    # window['-FILE_NAME-'].update(filename)
    # window['-FILES_NUMS-'].update(f'{ip + 1}/{num_files} ')
    window['-PHOTOS-'].update(set_to_index=ip)
window.close()
